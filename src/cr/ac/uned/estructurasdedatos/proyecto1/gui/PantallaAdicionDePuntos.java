package cr.ac.uned.estructurasdedatos.proyecto1.gui;

import cr.ac.uned.estructurasdedatos.proyecto1.dominio.Pais;
import cr.ac.uned.estructurasdedatos.proyecto1.logica.Ranking;
import javax.swing.JOptionPane;

/**
 * Esta clase es para agregar nuevo puntaje.
 * @author Mayarling Martinez
 */
public class PantallaAdicionDePuntos extends javax.swing.JFrame {
    
    private final Ranking ranking;
    private final PantallaPrincipal pantallaPrincipal;

    /**
     * Constructor por parametros.
     * 
     * @param ranking Referencia al objeto Ranking que se usa en la ventana principal.
     * @param pantallaPrincipal Referencia a la ventana principal.
     */
    public PantallaAdicionDePuntos(Ranking ranking, PantallaPrincipal pantallaPrincipal) {
        initComponents();
        this.ranking = ranking;
        this.pantallaPrincipal = pantallaPrincipal;
        this.cargarComboPaises();
    }
    
    /**
     * Método para cargar el combo de paises.
     */
    private void cargarComboPaises(){
        this.comboEleccionPais.removeAllItems();
        for(int i = 0; i < this.ranking.getPaises().length ; i++){
            Pais pais = this.ranking.getPaises()[i];
            this.comboEleccionPais.addItem(pais.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etiquetaTitulo = new javax.swing.JLabel();
        etiquetaPais = new javax.swing.JLabel();
        comboEleccionPais = new javax.swing.JComboBox<>();
        etiquetaPuntosNuevos = new javax.swing.JLabel();
        campoPuntos = new javax.swing.JTextField();
        botonGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Adición de puntos");
        setResizable(false);

        etiquetaTitulo.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        etiquetaTitulo.setText("Adición de puntos");

        etiquetaPais.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        etiquetaPais.setText("País:");

        etiquetaPuntosNuevos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        etiquetaPuntosNuevos.setText("Puntos Nuevos:");

        campoPuntos.setToolTipText("Digite los nuevos puntos");

        botonGuardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botonGuardar.setText("Guardar");
        botonGuardar.setToolTipText("Click para guardar los nuevos puntos");
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(etiquetaPuntosNuevos)
                        .addGap(26, 26, 26)
                        .addComponent(campoPuntos))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(etiquetaPais)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(etiquetaTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboEleccionPais, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(botonGuardar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(etiquetaTitulo)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaPais)
                    .addComponent(comboEleccionPais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaPuntosNuevos)
                    .addComponent(campoPuntos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(botonGuardar)
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Aquí se captura la accion del click en el boton Guardar
     * @param evt el evento
     */
    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        int indiceDelPais = this.comboEleccionPais.getSelectedIndex();
        boolean datosValidos = true;
        String datosIngresados = this.campoPuntos.getText();
        double puntosNuevos = 0;
        if(datosIngresados == null || datosIngresados.equals("")){
            datosValidos = false;
            JOptionPane.showMessageDialog(this, "Debe ingresar los nuevos puntos.", "Error de validación", JOptionPane.ERROR_MESSAGE);
        } else {
            try{
                puntosNuevos = Double.parseDouble(datosIngresados);
                if(puntosNuevos <= 0 || puntosNuevos > 3000) {
                    datosValidos = false;
                    JOptionPane.showMessageDialog(this, "Los puntos deben estar entre 1 y 3000.", "Error de validación", JOptionPane.ERROR_MESSAGE);
                }
                String decimales = Double.toString(puntosNuevos).split("\\.")[1];
                if(decimales.length() > 2){
                    datosValidos = false;
                    JOptionPane.showMessageDialog(this, "Solo se permiten 2 decimales.", "Error de validación", JOptionPane.ERROR_MESSAGE);
                }
            } catch(NumberFormatException exception){
                datosValidos = false;
                JOptionPane.showMessageDialog(this, "Debe ingresar solo números.", "Error de validación", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        if(datosValidos) {
            this.ranking.agregarPuntos(indiceDelPais, puntosNuevos);
            this.pantallaPrincipal.cargarModelo();
            this.dispose();
        }
    }//GEN-LAST:event_botonGuardarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonGuardar;
    private javax.swing.JTextField campoPuntos;
    private javax.swing.JComboBox<String> comboEleccionPais;
    private javax.swing.JLabel etiquetaPais;
    private javax.swing.JLabel etiquetaPuntosNuevos;
    private javax.swing.JLabel etiquetaTitulo;
    // End of variables declaration//GEN-END:variables
}
